---
import { getEntry } from "astro:content";
import { render } from "astro:content";
import Markdown from "@components/misc/Markdown.astro";
import type { GetStaticPaths } from "astro";
import PostCard from "../components/PostCard.astro";
import PostMetadata from "../components/PostMeta.astro";
import { PAGE_SIZE } from "../constants/constants";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import Layout from "../layouts/Layout.astro";
import MainGridLayout from "../layouts/MainGridLayout.astro";
import { getSortedPosts } from "../utils/content-utils";
import { getPostUrlBySlug } from "../utils/url-utils";

// This function is needed for static generation
export const getStaticPaths = (async ({ paginate }) => {
	const allBlogPosts = await getSortedPosts();
	return paginate(allBlogPosts, { pageSize: PAGE_SIZE });
}) satisfies GetStaticPaths;

const { page } = Astro.props;

// 获取about页面内容
const aboutPost = await getEntry("spec", "about");

if (!aboutPost) {
	throw new Error("About page content not found");
}

const { Content } = await render(aboutPost);

// 获取最新的3篇博客文章
const latestPosts = await getSortedPosts();
const recentPosts = latestPosts.slice(0, 3);
---

<Layout title="博客首页">	<MainGridLayout>
		<div class="transition-swup-fade">
			<!-- 个人简介部分 -->
			<div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32 mb-8">
				<div class="card-base z-10 px-9 py-6 relative w-full ">
					<Markdown class="mt-2">
						<Content />
					</Markdown>
				</div>
			</div>

			<!-- 最新文章展示框 -->
			<div style="margin-top: 20px; margin-bottom: 30px;" class="onload-animation">
				<h2 style="font-size: 1.5rem; font-weight: bold; margin-bottom: 15px;" class="text-90">
					最新博客文章
				</h2>
				<div style="background-color: var(--card-bg); backdrop-filter: blur(8px); border-radius: 16px; padding: 15px; border: 1px solid rgba(255, 255, 255, 0.1);">
					{recentPosts.map((post, index) => (
						<div key={post.slug} style={`margin-bottom: ${index < recentPosts.length - 1 ? '15px' : '0'}; padding-bottom: ${index < recentPosts.length - 1 ? '15px' : '0'}; border-bottom: ${index < recentPosts.length - 1 ? '1px solid rgba(0, 0, 0, 0.05)' : 'none'};`}>
							<a 
								href={getPostUrlBySlug(post.slug)} 
								style="text-decoration: none; display: block;" class="text-90"
							>
								<h3 style="font-size: 1.2rem; font-weight: 600; margin-bottom: 8px; transition: color 0.2s;" 
									class="hover:text-[var(--primary)]">
									{post.data.title}
								</h3>
								<PostMetadata 
									published={post.data.published}
									updated={post.data.updated}
									tags={post.data.tags}
									category={post.data.category}
									hideTagsForMobile={true}
									hideUpdateDate={true}
									style="margin-bottom: 8px; color: rgba(255, 255, 255, 0.65);"
									class="dark:text-white/65 text-black/65"
								/>
								<p style="font-size: 0.95rem; margin-bottom: 0; line-height: 1.5; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis;" class="dark:text-white/65 text-black/65">
									{post.data.description || '这是一篇没有描述的文章'}
								</p>
							</a>
						</div>
					))}
				</div>
			</div>

			<!-- giscus评论 -->
			<div style="margin-top: 20px; margin-bottom: 30px;"></div>
			<script src="https://giscus.app/client.js"
					data-repo="mikann-OMO/comments"
					data-repo-id="R_kgDOO3ArSw"
					data-category="[在此输入分类名]"
					data-category-id="[在此输入分类 ID]"
					data-mapping="pathname"
					data-strict="0"
					data-reactions-enabled="1"
					data-emit-metadata="0"
					data-input-position="bottom"
					data-theme="preferred_color_scheme"
					data-lang="zh-CN"
					crossorigin="anonymous"
					async>
			</script>
		</div>
	</MainGridLayout>
</Layout>

<style is:global>
#post-container :nth-child(1) { animation-delay: calc(var(--content-delay) + 0ms) }
#post-container :nth-child(2) { animation-delay: calc(var(--content-delay) + 50ms) }
#post-container :nth-child(3) { animation-delay: calc(var(--content-delay) + 100ms) }
#post-container :nth-child(4) { animation-delay: calc(var(--content-delay) + 175ms) }
#post-container :nth-child(5) { animation-delay: calc(var(--content-delay) + 250ms) }
#post-container :nth-child(6) { animation-delay: calc(var(--content-delay) + 325ms) } 
</style>